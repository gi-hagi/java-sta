<配列>
・Rubyと同様にJavaにも配列がありますが、Rubyの配列とは性質が異なります。

<<Javaの配列は、格納する要素の数を最初に決める必要があり、かつ後で要素数を変更することができません。>>

要素を増やす場合は、サイズの大きな配列を新たに作成して元データをコピーするか、ArrayListというリストの一種を使用します。
ArrayListは要素の数を変更できる配列のようなもので、ウェブアプリケーション開発ではよく使用されます。

[replit]

class Main {
  public static void main(String[] args) {
    int[] scores;
    scores = new int[3];

    scores[0] = 1;
    scores[1] = 5;
    scores[2] = 10;

    System.out.println(scores[0]);
    System.out.println(scores[1]);
    System.out.println(scores[2]);
  }
}

コードを実行すると、
1
5
10

と表示される。
Rubyの場合と比べて、コードの記述量が多くなっています。
いま記述したコードを参照しながら、配列の使い方を確認していきましょう。


<配列の使い方>
Javaで配列を使用する際は、以下の手順が必要です。

① 配列の宣言を行う
② 配列の要素を作成し、配列に代入する
③ 配列の要素に値を代入する

それぞれの意味を確認しましょう。

① 配列の宣言を行う
最初に行うのは配列の宣言です。
宣言は以下のように行います。


int[] scores;


前の章で、整数型の変数を宣言する時は、int score;といった記述をすると学習しました。
それと同じように、int型の整数を格納する配列の宣言はint[] scores;と記述します。
この「int」は要素として格納したいデータ型を指定するもので、例えばlong型の整数を格納する配列ならlong[] scores;のように宣言します。
この記述によって、配列という入れ物の宣言を行ったことになります。


② 配列の要素を作成し、配列に代入する
つづいて、配列の要素を作成して、それを配列に代入します。
先ほど以下のコードを実行しました。

scores = new int[3];

このうち、以下の右辺部分に注目しましょう。

new int[3];

このコードで、int型の要素を３つ作成しています。
そして、以下のように配列scoresに代入しています。


scores = new int[3];

ここまでのコードによって、配列の宣言と、配列に３つの要素を代入する受け皿を用意することができました。


③ 配列の要素に値を代入する
最後に行うのが値の代入です。
先ほど以下のコードを記述しました。

scores[0] = 1;

配列scoresの1番目の要素に「1」を代入しています。
この書き方はRubyと似ているためわかりやすいのではないでしょうか。
「1番目」を表すインデックスとして「0」を指定することもRubyと同じです。
また、配列の要素を取り出すときは、以下のように行います。

scores[0]

この書き方もRubyと同じです。
配列の基本的な使い方は以上です。
ただし、配列を使う際の記述方法にはいくつかのバリエーションがあるので、それらについても理解しておきましょう。


<配列のさまざまな記述方法を理解しよう>

① 配列の宣言と同時に、要素の作成も行う方法
先ほど実行したコードでは、以下のように配列の宣言と要素の作成を別に行っていました。

int[] scores;
scores = new int[3];

この２つは、以下のように1行で記述することもできます。

int[] scores = new int[3];

