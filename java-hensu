[変数を理解する]

変数を宣言するためには、以下のように型名に続けて変数名を記述します。

型名　変数名;

行末に「;（セミコロン）」がついていることに注意しましょう。
Javaでは、命令の終わりにセミコロンが必要で、書き忘れるとエラーになります。
宣言した後の変数は、Rubyと同様に使うことができます。

[replitでの入力]
エディタを使用して、以下のコードを記述します。

1 class Main {
2   public static void main(String[] args) {
3     int radius;
4     radius = 5;
5     System.out.println(radius * radius * 3.14);
6   }
7 }

なお、上記の1,2,6,7行目はJavaでは必ず書かなくてはいけないコードです。これらのコードを削除しないよう注意しましょう。

class Main {
  public static void main(String[] args) {
    //ここに処理を記述する
  }
}

このコードについて、今は必ず書かなくてはいけないテンプレートのようなものだと捉えてください。
また、System.out.printlnは、（）で囲んだ中身を出力するメソッドで、Rubyのputsに相当するものです。

<コードの実行>
[replitでの実行]
コードの記述を行ったら、エディタ上部の「Run」ボタンをクリックしてコードを実行しましょう。
上記のコードを入力し実行すると、計算結果が「78.5」と表示されます。

現在実行したコードを確認してみると、

1 int radius;
2 radius = 5;
3 System.out.println(radius * radius * 3.14);

① int radius;によって、int型の変数radiusを宣言する
② radius = 5;によって、変数radiusに整数の5を代入する
③ printlnを実行して、計算結果を出力する。

このように、Javaで変数を使用する際には、まず型の宣言が必要です。

ただし、Javaには「型推論」と呼ばれる仕組みがあり、宣言に関するコードを省略することができます。



[型推論]
まず型推論を利用した変数の宣言方法について見てみましょう。

1 var 変数名 = 値

このように、「var」を使って宣言を行い、初期値を代入します。
この記述を行うと、値の種類によってデータ型が推論され、推論されたデータ型で宣言が行われます。

・コードの入力
「replitでの入力」

1 class Main {
2   public static void main(String[] args) {
3     var radius = 5;
4     System.out.println(radius * radius * 3.14);
5   }
6 }

このコードを実行すると、先ほどと同じ演算結果が出力され、正しく動作していることがわかります。
このようにvarを使用すると、代入する値（今回の例では5）からデータ型を推論してくれるため、int型であるという宣言が不要になります。

<データ型の種類の確認>

先ほどのコードの５行目に以下のコードを追加します。

System.out.println(((Object)radius).getClass().getSimpleName());

なお、いま追加したコードはデータ型を確認するため、この箇所でのみ使用するものです。


ここでプログラムを実行すると、「Integer」と表示され、変数radiusが整数型で宣言されていることがわかります。


なお、データ型の「int」といま出力された「Integer」は異なるものですが、ここではどちらも同じく整数型を表すものと捉えてください。
ここまで学習したように、Javaで変数を使用する際は宣言が必要です。ただし、宣言と同時に初期値を代入する場合は、省略することも可能です。

以上でJavaの変数に関する学習は完了です。